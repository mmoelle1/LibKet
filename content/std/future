#pragma once
#ifndef FUTURE
#define FUTURE

#include <chrono>

namespace std {

  enum class launch {
    async,
    deferred
  };
  
  enum class future_status {
    ready,
    timeout,
    deferred
  };

  template<class T>
  class future {
  public:    
    future() noexcept {}
    future(T value) : value(value) {}
    future(future&& other) noexcept {}
    future(const future& other) = delete;

    future& operator=(future&& other) noexcept { value = std::move(other.value); return *this; }
    future& operator=(const future& other) = delete;
    
    T    get() { return value; }
    bool valid() const noexcept { return true; }    
    void wait() const {}
    
    template< class Rep, class Period >
    std::future_status wait_for(const std::chrono::duration<Rep,Period>& timeout_duration) const
    { return future_status::ready; };

    template< class Clock, class Duration >
    std::future_status wait_until( const std::chrono::time_point<Clock,Duration>& timeout_time ) const
    { return future_status::ready; };
    
  private:
    T value;
  };
  
  template<class T>
  class future<T&> {
  public:
    
    future() noexcept : value(nullptr) {}
    future(T& value) : value(&value) {}
    future(future&& other) noexcept {}    
    future(const future& other) = delete;

    future& operator=(future&& other) noexcept { value = other.value; other.value = nullptr; return *this; }
    future& operator=(const future& other) = delete;
    
    T&   get() { return *value; }
    bool valid() const noexcept { return true; }
    void wait() const {}

    template< class Rep, class Period >
    std::future_status wait_for(const std::chrono::duration<Rep,Period>& timeout_duration) const
    { return future_status::ready; };

    template< class Clock, class Duration >
    std::future_status wait_until( const std::chrono::time_point<Clock,Duration>& timeout_time ) const
    { return future_status::ready; };

  private:
    T* value;
  };
  
  template<>
  class future<void> {
  public:
    
    future() noexcept {}
    future(future&& other) noexcept {}    
    future(const future& other) = delete;

    future& operator=(future&& other) noexcept = default;
    future& operator=(const future& other) = delete;
    
    void get() {}    
    bool valid() const noexcept { return true; }
    void wait() const {}
    
    template< class Rep, class Period >
    std::future_status wait_for(const std::chrono::duration<Rep,Period>& timeout_duration) const
    { return future_status::ready; };

    template< class Clock, class Duration >
    std::future_status wait_until( const std::chrono::time_point<Clock,Duration>& timeout_time ) const
    { return future_status::ready; };
  };

} // namespace std

#endif // FUTURE
